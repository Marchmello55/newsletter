import os
import asyncio
import random
from datetime import datetime
from telethon import events
from telethon.tl.functions.channels import GetParticipantsRequest, JoinChannelRequest, GetFullChannelRequest
from telethon.tl.types import ChannelParticipantsSearch, InputPeerUser, MessageMediaDocument
from telethon.errors import ChannelPrivateError, UsernameNotOccupiedError, ChannelInvalidError, FloodWaitError
from telethon.errors import PeerIdInvalidError, UserIsBlockedError
import re
import logging


from config_data.client import client
from utils.random_get_message import random_message, TypeMessage

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏
newsletter_state = {
    'is_running': False,
    'total_users': 0,
    'sent_count': 0,
    'failed_count': 0,
    'current_batch': 0,
    'start_time': None,
    'end_time': None,
    'message_type': '',
    'user_ids': [],
    'current_index': 0
}

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è –æ–∂–∏–¥–∞–µ–º—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
waiting_for_response = {}


def is_valid_message_event(event):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ —ç—Ç–æ –≤–∞–ª–∏–¥–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    return (hasattr(event, 'message') and
            hasattr(event.message, 'text') and
            isinstance(event, events.NewMessage.Event))


async def wait_for_user_response(chat_id, timeout=60):
    """–û–∂–∏–¥–∞–µ—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        # –°–æ–∑–¥–∞–µ–º future –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è
        response_future = asyncio.Future()
        waiting_for_response[chat_id] = response_future

        # –ñ–¥–µ–º –æ—Ç–≤–µ—Ç–∞ —Å —Ç–∞–π–º–∞—É—Ç–æ–º
        response = await asyncio.wait_for(response_future, timeout=timeout)
        return response

    except asyncio.TimeoutError:
        return None
    finally:
        # –£–±–∏—Ä–∞–µ–º –∏–∑ –æ–∂–∏–¥–∞–Ω–∏—è
        if chat_id in waiting_for_response:
            del waiting_for_response[chat_id]


@client.on(events.NewMessage())
async def handle_user_responses(event):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    if not is_valid_message_event(event):
        return

    chat_id = event.chat_id
    if chat_id in waiting_for_response:
        # –ó–∞–≤–µ—Ä—à–∞–µ–º future —Å –æ—Ç–≤–µ—Ç–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        waiting_for_response[chat_id].set_result(event.message)


async def send_message_to_user(user_id, message_text, client):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ ID"""
    try:
        user_entity = InputPeerUser(user_id=int(user_id), access_hash=0)
        await client.send_message(entity=user_entity, message=message_text)
        logging.info(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
        return True
    except (PeerIdInvalidError, UserIsBlockedError, ValueError, Exception) as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
        return False


async def send_messages_batch(user_ids_batch, message_type, client):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–∞—á–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π —Å —Ä–∞–Ω–¥–æ–º–Ω—ã–º–∏ –∑–∞–¥–µ—Ä–∂–∫–∞–º–∏"""
    batch_results = {'success': 0, 'failed': 0}

    for user_id in user_ids_batch:
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–Ω–¥–æ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            message_text = await random_message(message_type)

            # –†–∞–Ω–¥–æ–º–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ 3-5 —Å–µ–∫—É–Ω–¥
            delay = random.uniform(3, 5)
            await asyncio.sleep(delay)

            success = await send_message_to_user(user_id, message_text, client)

            if success:
                batch_results['success'] += 1
                newsletter_state['sent_count'] += 1
            else:
                batch_results['failed'] += 1
                newsletter_state['failed_count'] += 1

            newsletter_state['current_index'] += 1

        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
            batch_results['failed'] += 1
            newsletter_state['failed_count'] += 1
            newsletter_state['current_index'] += 1

    return batch_results


async def run_newsletter():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏ —Å —Ü–∏–∫–ª–∞–º–∏ –∏ –ø–µ—Ä–µ—Ä—ã–≤–∞–º–∏"""
    global newsletter_state

    while newsletter_state['is_running'] and newsletter_state['current_index'] < len(newsletter_state['user_ids']):
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞–∑–º–µ—Ä —Ç–µ–∫—É—â–µ–π –ø–∞—á–∫–∏ (—Ä–∞–Ω–¥–æ–º–Ω–æ 5-15 —Å–æ–æ–±—â–µ–Ω–∏–π)
            batch_size = random.randint(5, 15)
            remaining_users = len(newsletter_state['user_ids']) - newsletter_state['current_index']
            batch_size = min(batch_size, remaining_users)

            # –ë–µ—Ä–µ–º –ø–∞—á–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            start_idx = newsletter_state['current_index']
            end_idx = start_idx + batch_size
            user_ids_batch = newsletter_state['user_ids'][start_idx:end_idx]

            newsletter_state['current_batch'] += 1

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–∞—á–∫—É
            logging.info(f"üì¶ –ü–∞—á–∫–∞ #{newsletter_state['current_batch']}: {batch_size} —Å–æ–æ–±—â–µ–Ω–∏–π")
            batch_results = await send_messages_batch(user_ids_batch, newsletter_state['message_type'], client)

            logging.info(f"‚úÖ –ü–∞—á–∫–∞ #{newsletter_state['current_batch']} –∑–∞–≤–µ—Ä—à–µ–Ω–∞: "
                         f"{batch_results['success']} —É—Å–ø–µ—à–Ω–æ, {batch_results['failed']} –Ω–µ—É–¥–∞—á–Ω–æ")

            # –ï—Å–ª–∏ –µ—â–µ –µ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ - –¥–µ–ª–∞–µ–º –ø–µ—Ä–µ—Ä—ã–≤ 15 –º–∏–Ω—É—Ç
            if newsletter_state['current_index'] < len(newsletter_state['user_ids']):
                logging.info("‚è∏Ô∏è –ü–µ—Ä–µ—Ä—ã–≤ 15 –º–∏–Ω—É—Ç –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –ø–∞—á–∫–∏...")
                await asyncio.sleep(15 * 60)

        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ run_newsletter: {e}")
            await asyncio.sleep(60)

    # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏
    newsletter_state['is_running'] = False
    newsletter_state['end_time'] = datetime.now()
    logging.info("‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")


def get_newsletter_status():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç—É—Å —Ç–µ–∫—É—â–µ–π —Ä–∞—Å—Å—ã–ª–∫–∏"""
    if not newsletter_state['is_running']:
        return "üì≠ –†–∞—Å—Å—ã–ª–∫–∞ –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞"

    elapsed = datetime.now() - newsletter_state['start_time']
    progress = (newsletter_state['current_index'] / newsletter_state['total_users'] * 100) if newsletter_state[
                                                                                                  'total_users'] > 0 else 0

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ä–∞—Å—Å—ã–ª–∫–∏
    if newsletter_state['message_type'] == 'custom':
        message_info = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è ({len(newsletter_state.get('message_variations', []))} –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤)"
    else:
        message_info = "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è (–≤–æ–ø—Ä–æ—Å—ã)"

    status = (
        f"üìä –°—Ç–∞—Ç—É—Å —Ä–∞—Å—Å—ã–ª–∫–∏:\n"
        f"‚Ä¢ üèÉ‚Äç‚ôÇÔ∏è –°—Ç–∞—Ç—É—Å: {'–ó–∞–ø—É—â–µ–Ω–∞' if newsletter_state['is_running'] else '–ó–∞–≤–µ—Ä—à–µ–Ω–∞'}\n"
        f"‚Ä¢ üì® –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {newsletter_state['sent_count']}/{newsletter_state['total_users']}\n"
        f"‚Ä¢ ‚ùå –ù–µ—É–¥–∞—á–Ω–æ: {newsletter_state['failed_count']}\n"
        f"‚Ä¢ üì¶ –ü–∞—á–µ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {newsletter_state['current_batch']}\n"
        f"‚Ä¢ üìù –¢–∏–ø: {message_info}\n"
        f"‚Ä¢ üìà –ü—Ä–æ–≥—Ä–µ—Å—Å: {progress:.1f}%\n"
        f"‚Ä¢ ‚è±Ô∏è –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {elapsed}\n"
        f"‚Ä¢ üéØ –¢–µ–∫—É—â–∏–π –∏–Ω–¥–µ–∫—Å: {newsletter_state['current_index']}"
    )

    return status


@client.on(events.NewMessage(pattern='/newsletter_status'))
async def newsletter_status_command(event):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã —Å—Ç–∞—Ç—É—Å–∞ —Ä–∞—Å—Å—ã–ª–∫–∏"""
    try:
        if not is_valid_message_event(event):
            return

        status = get_newsletter_status()
        await event.reply(status)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ newsletter_status_command: {e}")


@client.on(events.NewMessage(pattern='/stop_newsletter'))
async def stop_newsletter_command(event):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ä–∞—Å—Å—ã–ª–∫–∏"""
    try:
        if not is_valid_message_event(event):
            return

        global newsletter_state

        if not newsletter_state['is_running']:
            await event.reply("‚ùå –†–∞—Å—Å—ã–ª–∫–∞ –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞")
            return

        newsletter_state['is_running'] = False
        await event.reply("üõë –†–∞—Å—Å—ã–ª–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞. –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å:\n" + get_newsletter_status())

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ stop_newsletter_command: {e}")


async def download_file(event, message):
    """–°–∫–∞—á–∏–≤–∞–µ—Ç —Ñ–∞–π–ª –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    try:
        if message.media and isinstance(message.media, MessageMediaDocument):
            os.makedirs("downloads", exist_ok=True)
            file_path = await client.download_media(message.media, "downloads/")
            logging.info(f"–§–∞–π–ª —Å–∫–∞—á–∞–Ω: {file_path}")
            return file_path
        else:
            await event.reply("‚ùå –í —Å–æ–æ–±—â–µ–Ω–∏–∏ –Ω–µ—Ç —Ñ–∞–π–ª–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è")
            return None
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")
        await event.reply(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")
        return None


async def parse_user_ids_from_file(file_path: str) -> list:
    """–ü–∞—Ä—Å–∏—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Ñ–∞–π–ª–∞"""
    user_ids = []

    try:
        with open(file_path, 'r', encoding='utf-8') as file:
            for line in file:
                user_id = line.split(" ")
                for i in user_id:
                    if i and i.isdigit():
                        user_ids.append(i)

        logging.info(f"Parsed {len(user_ids)} user IDs from file")
        return user_ids

    except Exception as e:
        logging.error(f"Error parsing user IDs: {e}")
        return []


@client.on(events.NewMessage(pattern='/start_newsletter'))
async def newsletter(event):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /newsletter"""
    global newsletter_state

    try:
        if not is_valid_message_event(event):
            return

        if newsletter_state['is_running']:
            await event.reply("‚ùå –†–∞—Å—Å—ã–ª–∫–∞ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /newsletter_status –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞")
            return

        message_type = TypeMessage.question
        type_name = "–≤–æ–ø—Ä–æ—Å—ã"  # –î–æ–±–∞–≤–ª–µ–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π type_name

        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ñ–∞–π–ª
        await event.reply(
            "–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª (.txt) —Å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.\n"
            "–ö–∞–∂–¥—ã–π ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ."
        )

        # –ñ–¥–µ–º —Ñ–∞–π–ª –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        file_response = await wait_for_user_response(event.chat_id, timeout=120)

        if not file_response:
            await event.reply("‚è∞ –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞ –∏—Å—Ç–µ–∫–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return

        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
        file_path = await download_file(event, file_response)
        if not file_path:
            return

        # –ü–∞—Ä—Å–∏–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        user_ids = await parse_user_ids_from_file(file_path)

        if not user_ids:
            await event.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å ID –∏–∑ —Ñ–∞–π–ª–∞ –∏–ª–∏ —Ñ–∞–π–ª –ø—É—Å—Ç.")
            try:
                os.remove(file_path)
            except:
                pass
            return

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏
        newsletter_state.update({
            'is_running': True,
            'total_users': len(user_ids),
            'sent_count': 0,
            'failed_count': 0,
            'current_batch': 0,
            'start_time': datetime.now(),
            'end_time': None,
            'message_type': message_type,
            'user_ids': user_ids,
            'current_index': 0
        })

        await event.reply(
            f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞!\n"
            f"‚Ä¢ üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(user_ids)}\n"
            f"‚Ä¢ üìù –¢–∏–ø —Å–æ–æ–±—â–µ–Ω–∏–π: {type_name}\n"
            f"‚Ä¢ ‚è±Ô∏è –ü–µ—Ä–µ—Ä—ã–≤—ã: 15 –º–∏–Ω—É—Ç –º–µ–∂–¥—É –ø–∞—á–∫–∞–º–∏\n"
            f"‚Ä¢ ‚ö° –°–æ–æ–±—â–µ–Ω–∏—è: 3-5 —Å–µ–∫—É–Ω–¥ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏\n\n"
            f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /newsletter_status –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞"
        )

        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É –≤ —Ñ–æ–Ω–µ
        asyncio.create_task(run_newsletter())

        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        try:
            os.remove(file_path)
        except:
            pass

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ newsletter –∫–æ–º–∞–Ω–¥–µ: {e}")
        if is_valid_message_event(event):
            await event.reply(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")


@client.on(events.NewMessage(pattern='/custom_newsletter'))
async def custom_newsletter(event):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /custom_newsletter —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º"""
    global newsletter_state

    try:
        if not is_valid_message_event(event):
            return

        if newsletter_state['is_running']:
            await event.reply("‚ùå –†–∞—Å—Å—ã–ª–∫–∞ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /newsletter_status –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞")
            return

        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await event.reply(
            "üìù –ö–æ–º–∞–Ω–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:"
        )

        # –ñ–¥–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        message_response = await wait_for_user_response(event.chat_id, timeout=120)

        if not message_response:
            await event.reply("‚è∞ –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –∏—Å—Ç–µ–∫–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return

        message_text = message_response.text.strip()
        if not message_text:
            await event.reply("‚ùå –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.")
            return

        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ñ–∞–π–ª —Å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        await event.reply(
            "‚úÖ –¢–µ–∫—Å—Ç –ø–æ–ª—É—á–µ–Ω! –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª (.txt) —Å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.\n"
            "–ö–∞–∂–¥—ã–π ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ."
        )

        # –ñ–¥–µ–º —Ñ–∞–π–ª –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        file_response = await wait_for_user_response(event.chat_id, timeout=120)

        if not file_response:
            await event.reply("‚è∞ –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞ –∏—Å—Ç–µ–∫–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return

        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
        file_path = await download_file(event, file_response)
        if not file_path:
            return

        # –ü–∞—Ä—Å–∏–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        user_ids = await parse_user_ids_from_file(file_path)

        if not user_ids:
            await event.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å ID –∏–∑ —Ñ–∞–π–ª–∞ –∏–ª–∏ —Ñ–∞–π–ª –ø—É—Å—Ç.")
            try:
                os.remove(file_path)
            except:
                pass
            return

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π (3-6)
        num_messages = random.randint(3, 6)
        message_variations = [message_text]

        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à–∏–µ –≤–∞—Ä–∏–∞—Ü–∏–∏ –∫ —Å–æ–æ–±—â–µ–Ω–∏—è–º


        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏
        newsletter_state.update({
            'is_running': True,
            'total_users': len(user_ids),
            'sent_count': 0,
            'failed_count': 0,
            'current_batch': 0,
            'start_time': datetime.now(),
            'end_time': None,
            'message_type': 'custom',
            'message_variations': message_variations,
            'user_ids': user_ids,
            'current_index': 0
        })

        await event.reply(
            f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞!\n"
            f"‚Ä¢ üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(user_ids)}\n"
            f"‚Ä¢ üìù –°–æ–æ–±—â–µ–Ω–∏–π: {num_messages} –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤\n"
            f"‚Ä¢ ‚è±Ô∏è –ü–µ—Ä–µ—Ä—ã–≤—ã: 15 –º–∏–Ω—É—Ç –º–µ–∂–¥—É –ø–∞—á–∫–∞–º–∏\n"
            f"‚Ä¢ ‚ö° –°–æ–æ–±—â–µ–Ω–∏—è: 3-5 —Å–µ–∫—É–Ω–¥ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏\n\n"
            f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /newsletter_status –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞"
        )

        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É –≤ —Ñ–æ–Ω–µ
        asyncio.create_task(run_custom_newsletter())

        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        try:
            os.remove(file_path)
        except:
            pass

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ custom_newsletter –∫–æ–º–∞–Ω–¥–µ: {e}")
        if is_valid_message_event(event):
            await event.reply(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")


async def run_custom_newsletter():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏"""
    global newsletter_state

    while newsletter_state['is_running'] and newsletter_state['current_index'] < len(newsletter_state['user_ids']):
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞–∑–º–µ—Ä —Ç–µ–∫—É—â–µ–π –ø–∞—á–∫–∏ (—Ä–∞–Ω–¥–æ–º–Ω–æ 3-6 —Å–æ–æ–±—â–µ–Ω–∏–π)
            batch_size = random.randint(3, 6)
            remaining_users = len(newsletter_state['user_ids']) - newsletter_state['current_index']
            batch_size = min(batch_size, remaining_users)

            # –ë–µ—Ä–µ–º –ø–∞—á–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            start_idx = newsletter_state['current_index']
            end_idx = start_idx + batch_size
            user_ids_batch = newsletter_state['user_ids'][start_idx:end_idx]

            newsletter_state['current_batch'] += 1

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–∞—á–∫—É
            logging.info(f"üì¶ –ü–∞—á–∫–∞ #{newsletter_state['current_batch']}: {batch_size} —Å–æ–æ–±—â–µ–Ω–∏–π")
            batch_results = await send_custom_messages_batch(user_ids_batch, client)

            logging.info(f"‚úÖ –ü–∞—á–∫–∞ #{newsletter_state['current_batch']} –∑–∞–≤–µ—Ä—à–µ–Ω–∞: "
                         f"{batch_results['success']} —É—Å–ø–µ—à–Ω–æ, {batch_results['failed']} –Ω–µ—É–¥–∞—á–Ω–æ")

            # –ï—Å–ª–∏ –µ—â–µ –µ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ - –¥–µ–ª–∞–µ–º –ø–µ—Ä–µ—Ä—ã–≤ 15 –º–∏–Ω—É—Ç
            if newsletter_state['current_index'] < len(newsletter_state['user_ids']):
                logging.info("‚è∏Ô∏è –ü–µ—Ä–µ—Ä—ã–≤ 15 –º–∏–Ω—É—Ç –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –ø–∞—á–∫–∏...")
                await asyncio.sleep(15 * 60)

        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ run_custom_newsletter: {e}")
            await asyncio.sleep(60)

    # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏
    newsletter_state['is_running'] = False
    newsletter_state['end_time'] = datetime.now()
    logging.info("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")


async def send_custom_messages_batch(user_ids_batch, client):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–∞—á–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    batch_results = {'success': 0, 'failed': 0}

    for user_id in user_ids_batch:
        try:
            # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –≤–∞—Ä–∏–∞—Ü–∏–π
            message_text = random.choice(newsletter_state['message_variations'])

            # –†–∞–Ω–¥–æ–º–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ 3-5 —Å–µ–∫—É–Ω–¥
            delay = random.uniform(3, 5)
            await asyncio.sleep(delay)

            success = await send_message_to_user(user_id, message_text, client)

            if success:
                batch_results['success'] += 1
                newsletter_state['sent_count'] += 1
            else:
                batch_results['failed'] += 1
                newsletter_state['failed_count'] += 1

            newsletter_state['current_index'] += 1

        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
            batch_results['failed'] += 1
            newsletter_state['failed_count'] += 1
            newsletter_state['current_index'] += 1

    return batch_results


def extract_channel_username(link):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç username –∫–∞–Ω–∞–ª–∞ –∏–∑ —Å—Å—ã–ª–∫–∏"""
    patterns = [
        r't\.me/([a-zA-Z0-9_]+)',
        r'https?://t\.me/([a-zA-Z0-9_]+)',
        r'@([a-zA-Z0-9_]+)'
    ]

    for pattern in patterns:
        match = re.search(pattern, link)
        if match:
            return match.group(1)

    if link.startswith('@'):
        return link[1:]
    return link


async def join_channel(channel_username):
    """–ü—ã—Ç–∞–µ—Ç—Å—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∫–∞–Ω–∞–ª—É"""
    try:
        channel = await client.get_entity(channel_username)
        await client(JoinChannelRequest(channel))
        return True, f"‚úÖ –£—Å–ø–µ—à–Ω–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –∫–∞–Ω–∞–ª—É: {channel_username}"
    except ChannelPrivateError:
        return False, f"‚ùå –ö–∞–Ω–∞–ª {channel_username} –ø—Ä–∏–≤–∞—Ç–Ω—ã–π. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —Ä—É—á–Ω–æ–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ."
    except (UsernameNotOccupiedError, ChannelInvalidError):
        return False, f"‚ùå –ö–∞–Ω–∞–ª {channel_username} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω."
    except FloodWaitError as e:
        return False, f"‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–æ–∂–¥–∞—Ç—å {e.seconds} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π."
    except Exception as e:
        return False, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏ –∫ –∫–∞–Ω–∞–ª—É: {e}"


async def get_channel_users(channel_username, chat_id):
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∫–∞–Ω–∞–ª–∞"""
    try:
        # –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ
        channel = await client.get_entity(channel_username)
        full_channel = await client(GetFullChannelRequest(channel))

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
        if not hasattr(full_channel, 'full_chat') or not hasattr(full_channel.full_chat, 'participants_count'):
            await client.send_message(chat_id, "‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–∞–Ω–∞–ª–∞.")
            return None, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤"

        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        participants = await client(GetParticipantsRequest(
            channel=channel,
            filter=ChannelParticipantsSearch(''),
            offset=0,
            limit=10000,
            hash=0
        ))

        return participants.users, None

    except ChannelPrivateError:
        return None, "üîí –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–Ω–∞–ª—É."
    except Exception as e:
        return None, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}"


async def save_users_to_file(users, filename):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ñ–∞–π–ª"""
    with open(filename, 'w', encoding='utf-8') as file:
        for user in users:
            if user.username:
                file.write(f"{user.id} - @{user.username}\n")
            else:
                file.write(f"{user.id}\n")


async def process_channel(link, chat_id):
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–∞–Ω–∞–ª–∞"""
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º username –∏–∑ —Å—Å—ã–ª–∫–∏
        channel_username = extract_channel_username(link)
        await client.send_message(chat_id, f"üîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–Ω–∞–ª: {channel_username}")

        # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        users, error = await get_channel_users(channel_username, chat_id)

        if users is not None:
            # –ï—Å–ª–∏ –¥–æ—Å—Ç—É–ø –µ—Å—Ç—å —Å—Ä–∞–∑—É
            await client.send_message(chat_id, f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
            filename = f'{channel_username}_users.txt'
            await save_users_to_file(users, filename)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            await client.send_file(chat_id, filename, caption=f"üìä –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∫–∞–Ω–∞–ª–∞ {channel_username}")

            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            os.remove(filename)
            return True, "‚úÖ –û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!"
        else:
            # –ï—Å–ª–∏ –¥–æ—Å—Ç—É–ø–∞ –Ω–µ—Ç, –ø—ã—Ç–∞–µ–º—Å—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è
            await client.send_message(chat_id, "üîÑ –ü—ã—Ç–∞–µ–º—Å—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∫–∞–Ω–∞–ª—É...")
            joined, join_message = await join_channel(channel_username)
            await client.send_message(chat_id, join_message)

            if joined:
                # –ñ–¥–µ–º –±–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
                await asyncio.sleep(10)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è

                # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–Ω–æ–≤–∞
                users, error = await get_channel_users(channel_username, chat_id)

                if users is not None:
                    await client.send_message(chat_id, f"‚úÖ –ü–æ—Å–ª–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –Ω–∞–π–¥–µ–Ω–æ {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
                    filename = f'{channel_username}_users.txt'
                    await save_users_to_file(users, filename)

                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                    await client.send_file(chat_id, filename,
                                           caption=f"üìä –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∫–∞–Ω–∞–ª–∞ {channel_username}")

                    # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                    os.remove(filename)
                    return True, "‚úÖ –û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!"
                else:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ—Ç –ª–∏ –±–æ—Ç –≤–∏–¥–µ—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
                    try:
                        channel = await client.get_entity(channel_username)
                        full_channel = await client(GetFullChannelRequest(channel))

                        if hasattr(full_channel, 'full_chat') and hasattr(full_channel.full_chat, 'participants_count'):
                            count = full_channel.full_chat.participants_count
                            return False, f"‚ùå –ë–æ—Ç –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è, –Ω–æ –Ω–µ –º–æ–∂–µ—Ç –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤. –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ –∫–∞–Ω–∞–ª–µ: {count}. –í–æ–∑–º–æ–∂–Ω–æ, –Ω—É–∂–Ω—ã –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."
                        else:
                            return False, "‚ùå –ë–æ—Ç –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è, –Ω–æ –Ω–µ –º–æ–∂–µ—Ç –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ. –í–æ–∑–º–æ–∂–Ω–æ, –Ω—É–∂–Ω—ã –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."
                    except:
                        return False, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–∞–∂–µ –ø–æ—Å–ª–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è. –í–æ–∑–º–æ–∂–Ω–æ, –Ω—É–∂–Ω—ã –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."
            else:
                return False, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∫–∞–Ω–∞–ª—É"

    except Exception as e:
        return False, f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}"


@client.on(events.NewMessage(pattern='/get_users'))
async def get_users_command(event):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /get_users"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if not hasattr(event, 'message') or not event.message:
            return

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        message_text = event.message.text.strip()

        # –†–∞–∑–¥–µ–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –∏ –∞—Ä–≥—É–º–µ–Ω—Ç—ã
        parts = message_text.split(' ', 1)

        if len(parts) < 2:
            await event.reply("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã:\n`/get_users @channel_username`")
            return

        link = parts[1].strip()
        chat_id = event.message.chat_id

        await event.reply("‚è≥ –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É –∫–∞–Ω–∞–ª–∞...")

        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∫–∞–Ω–∞–ª–∞
        success, message = await process_channel(link, chat_id)

        await event.reply(message)
        await event.reply("\n" + "=" * 50 + "\n")

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ get_users_command: {e}")