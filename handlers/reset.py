from sqlalchemy.util import await_only
from utils.general import *
import os
import asyncio
import random
from datetime import datetime
from telethon import events
from telethon.tl.types import InputPeerUser, MessageMediaDocument
from telethon.errors import PeerIdInvalidError, UserIsBlockedError
import logging

from filter.filter import owner_filter
from config_data.client import client
from utils.random_get_message import random_message, TypeMessage
from utils.sqlite3_to_exel import create_excel_from_objects
from utils import working_state as ws


async def reset_state():
    global newsletter_state
    logging.info("reset_state")

    users_to_newsletter = await rq.get_users_to_newsletter()
    if len(users_to_newsletter) == 0:
        logging.info("–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏")
        return

    text = await get_text()
    if text:
        newsletter_state.update({
            'is_running': True,
            'total_users': len(await rq.get_users()),
            'sent_count': len(await rq.get_users_success()),
            'failed_count': len(await rq.get_users_fail()),
            'start_time': datetime.now(),
            'end_time': None,
            'message_type': "custom",
            'user_ids': users_to_newsletter,
            'current_index': 0,
            'current_batch': 0
        })
        asyncio.create_task(reset_custom_newsletter(client))
    else:
        newsletter_state.update({
            'is_running': True,
            'total_users': len(await rq.get_users()),
            'sent_count': len(await rq.get_users_success()),
            'failed_count': len(await rq.get_users_fail()),
            'start_time': datetime.now(),
            'end_time': None,
            'user_ids': users_to_newsletter,
            'current_index': 0,
            'current_batch': 0
        })
        asyncio.create_task(reset_newsletter(client))


async def reset_newsletter(client):
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –≤—Ä–µ–º–µ–Ω–∏"""
    global newsletter_state

    try:
        # –û–∂–∏–¥–∞–µ–º —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º
        if not await ws.work_state_chack():
            await client.send_message("me", "‚è∏Ô∏è –í–Ω–µ —Ä–∞–±–æ—á–µ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ (8:00-20:00). –û–∂–∏–¥–∞–µ–º...")
            await asyncio.sleep(await ws.time_to_work())
            if not newsletter_state['is_running']:
                await client.send_message("me", "‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –±—ã–ª–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –≤–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è.")
                return
            await client.send_message("me", "‚úÖ –†–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è –Ω–∞—Å—Ç—É–ø–∏–ª–æ! –ù–∞—á–∏–Ω–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É.")

        while newsletter_state['is_running'] and newsletter_state['current_index'] < len(newsletter_state['user_ids']):
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è –ø–µ—Ä–µ–¥ –∫–∞–∂–¥–æ–π –ø–∞—á–∫–æ–π
            if not await ws.work_state_chack():
                await client.send_message("me", "‚è∏Ô∏è –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤–Ω–µ —Ä–∞–±–æ—á–µ–≥–æ –ø–µ—Ä–∏–æ–¥–∞. –û–∂–∏–¥–∞–µ–º...")
                await asyncio.sleep(await ws.time_to_work())
                if not newsletter_state['is_running']:
                    await client.send_message("me", "‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –±—ã–ª–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –≤–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è.")
                    return
                await client.send_message("me", "‚úÖ –†–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è –Ω–∞—Å—Ç—É–ø–∏–ª–æ! –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É.")
                continue

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞–∑–º–µ—Ä —Ç–µ–∫—É—â–µ–π –ø–∞—á–∫–∏
            batch_size = random.randint(5, 15)
            remaining_users = len(newsletter_state['user_ids']) - newsletter_state['current_index']
            batch_size = min(batch_size, remaining_users)

            # –ë–µ—Ä–µ–º –ø–∞—á–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            start_idx = newsletter_state['current_index']
            end_idx = start_idx + batch_size
            user_ids_batch = newsletter_state['user_ids'][start_idx:end_idx]

            newsletter_state['current_batch'] += 1

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–∞—á–∫—É
            logging.info(f"üì¶ –ü–∞—á–∫–∞ #{newsletter_state['current_batch']}: {batch_size} —Å–æ–æ–±—â–µ–Ω–∏–π")
            await client.send_message("me", f"üì¶ –ü–∞—á–∫–∞ #{newsletter_state['current_batch']}: {batch_size} —Å–æ–æ–±—â–µ–Ω–∏–π")

            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –æ—Ç—á–µ—Ç–∞
            users = await rq.get_user_to_report_newsletter()
            if users:
                try:
                    filename = create_excel_from_objects(users)
                    await client.send_file("me", filename)
                    os.remove(filename)  # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                except Exception as e:
                    logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ Excel: {e}")
                    await client.send_message("me", f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞: {e}")

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
            batch_results = await send_messages_batch(user_ids_batch, newsletter_state['message_type'], client)

            logging.info(f"‚úÖ –ü–∞—á–∫–∞ #{newsletter_state['current_batch']} –∑–∞–≤–µ—Ä—à–µ–Ω–∞: "
                         f"{batch_results['success']} —É—Å–ø–µ—à–Ω–æ, {batch_results['failed']} –Ω–µ—É–¥–∞—á–Ω–æ")
            await client.send_message("me", f"‚úÖ –ü–∞—á–∫–∞ #{newsletter_state['current_batch']} –∑–∞–≤–µ—Ä—à–µ–Ω–∞: "
                                            f"{batch_results['success']} —É—Å–ø–µ—à–Ω–æ, {batch_results['failed']} –Ω–µ—É–¥–∞—á–Ω–æ")

            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–¥–µ–∫—Å
            newsletter_state['current_index'] = end_idx

            # –ï—Å–ª–∏ –µ—â–µ –µ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ - –¥–µ–ª–∞–µ–º –ø–µ—Ä–µ—Ä—ã–≤
            if newsletter_state['current_index'] < len(newsletter_state['user_ids']):
                logging.info("‚è∏Ô∏è –ü–µ—Ä–µ—Ä—ã–≤ 15 –º–∏–Ω—É—Ç –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –ø–∞—á–∫–∏...")
                await client.send_message("me", "‚è∏Ô∏è –ü–µ—Ä–µ—Ä—ã–≤ 15 –º–∏–Ω—É—Ç –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –ø–∞—á–∫–∏...")

                # –ñ–¥–µ–º —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
                for _ in range(15):
                    await asyncio.sleep(60)
                    if not newsletter_state['is_running']:
                        await client.send_message("me", "‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –≤–æ –≤—Ä–µ–º—è –ø–µ—Ä–µ—Ä—ã–≤–∞.")
                        return

    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ run_newsletter: {e}")
        await client.send_message("me", f"‚ùå –û—à–∏–±–∫–∞ –≤ run_newsletter: {e}")
    finally:
        # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏
        newsletter_state['is_running'] = False
        newsletter_state['end_time'] = datetime.now()
        logging.info("‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

        # –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
        users = await rq.get_user_to_report_newsletter()
        if users:
            try:
                filename = create_excel_from_objects(users)
                await client.send_file("me", filename)
                os.remove(filename)
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞: {e}")
                await client.send_message("me", f"‚ùå –û—à–∏–±–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞: {e}")

        status = (
            f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞\n"
            f"‚Ä¢ üì® –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {newsletter_state['sent_count']}/{newsletter_state['total_users']}\n"
            f"‚Ä¢ ‚ùå –ù–µ—É–¥–∞—á–Ω–æ: {newsletter_state['failed_count']}\n"
        )
        await client.send_message("me", status)


async def reset_custom_newsletter(client):
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –≤—Ä–µ–º–µ–Ω–∏"""
    global newsletter_state

    try:
        # –û–∂–∏–¥–∞–µ–º —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º
        if not await ws.work_state_chack():
            await client.send_message("me", "‚è∏Ô∏è –í–Ω–µ —Ä–∞–±–æ—á–µ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ (8:00-20:00). –û–∂–∏–¥–∞–µ–º...")
            await asyncio.sleep(await ws.time_to_work())
            if not newsletter_state['is_running']:
                await client.send_message("me", "‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –±—ã–ª–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –≤–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è.")
                return
            await client.send_message("me", "‚úÖ –†–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è –Ω–∞—Å—Ç—É–ø–∏–ª–æ! –ù–∞—á–∏–Ω–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É.")

        while newsletter_state['is_running'] and newsletter_state['current_index'] < len(newsletter_state['user_ids']):
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è
            if not await ws.work_state_chack():
                await client.send_message("me", "‚è∏Ô∏è –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤–Ω–µ —Ä–∞–±–æ—á–µ–≥–æ –ø–µ—Ä–∏–æ–¥–∞. –û–∂–∏–¥–∞–µ–º...")
                await asyncio.sleep(await ws.time_to_work())
                if not newsletter_state['is_running']:
                    await client.send_message("me", "‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –±—ã–ª–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –≤–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è.")
                    return
                await client.send_message("me", "‚úÖ –†–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è –Ω–∞—Å—Ç—É–ø–∏–ª–æ! –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É.")
                continue

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞–∑–º–µ—Ä –ø–∞—á–∫–∏
            batch_size = random.randint(3, 6)
            remaining_users = len(newsletter_state['user_ids']) - newsletter_state['current_index']
            batch_size = min(batch_size, remaining_users)

            # –ë–µ—Ä–µ–º –ø–∞—á–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            start_idx = newsletter_state['current_index']
            end_idx = start_idx + batch_size
            user_ids_batch = newsletter_state['user_ids'][start_idx:end_idx]

            newsletter_state['current_batch'] += 1

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–∞—á–∫—É
            logging.info(f"üì¶ –ü–∞—á–∫–∞ #{newsletter_state['current_batch']}: {batch_size} —Å–æ–æ–±—â–µ–Ω–∏–π")
            await client.send_message("me", f"üì¶ –ü–∞—á–∫–∞ #{newsletter_state['current_batch']}: {batch_size} —Å–æ–æ–±—â–µ–Ω–∏–π")

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            batch_results = await send_custom_messages_batch(user_ids_batch, client)

            logging.info(f"‚úÖ –ü–∞—á–∫–∞ #{newsletter_state['current_batch']} –∑–∞–≤–µ—Ä—à–µ–Ω–∞: "
                         f"{batch_results['success']} —É—Å–ø–µ—à–Ω–æ, {batch_results['failed']} –Ω–µ—É–¥–∞—á–Ω–æ")
            await client.send_message("me", f"‚úÖ –ü–∞—á–∫–∞ #{newsletter_state['current_batch']} –∑–∞–≤–µ—Ä—à–µ–Ω–∞: "
                                            f"{batch_results['success']} —É—Å–ø–µ—à–Ω–æ, {batch_results['failed']} –Ω–µ—É–¥–∞—á–Ω–æ")

            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–¥–µ–∫—Å
            newsletter_state['current_index'] = end_idx

            # –ü–µ—Ä–µ—Ä—ã–≤ –µ—Å–ª–∏ –µ—Å—Ç—å –µ—â–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
            if newsletter_state['current_index'] < len(newsletter_state['user_ids']):
                if len(batch_results['success']) != 0:
                    logging.info("‚è∏Ô∏è –ü–µ—Ä–µ—Ä—ã–≤ 15 –º–∏–Ω—É—Ç –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –ø–∞—á–∫–∏...")
                    await client.send_message("me", "‚è∏Ô∏è –ü–µ—Ä–µ—Ä—ã–≤ 15 –º–∏–Ω—É—Ç –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –ø–∞—á–∫–∏...")

                    # –ñ–¥–µ–º 15 –º–∏–Ω—É—Ç, –Ω–æ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É, –Ω–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ª–∏ —Ä–∞—Å—Å—ã–ª–∫–∞
                    for _ in range(15):
                        await asyncio.sleep(60)
                        if not newsletter_state['is_running']:
                            await client.send_message("me", "‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –≤–æ –≤—Ä–µ–º—è –ø–µ—Ä–µ—Ä—ã–≤–∞.")
                            return
                else:
                    logging.info("–í –ø–∞—á–∫–µ –Ω–µ –±—ã–ª–æ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ—ç—Ç–æ–º—É –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø–∞—á–∫–∏ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å–µ–π—á–∞—Å")
                    await client.send_message("me", "–í –ø–∞—á–∫–µ –Ω–µ –±—ã–ª–æ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ—ç—Ç–æ–º—É –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø–∞—á–∫–∏ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å–µ–π—á–∞—Å")

    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ run_custom_newsletter: {e}")
        await client.send_message("me", f"‚ùå –û—à–∏–±–∫–∞ –≤ run_custom_newsletter: {e}")

    finally:
        # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏
        newsletter_state['is_running'] = False
        newsletter_state['end_time'] = datetime.now()
        logging.info("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

        # –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
        users = await rq.get_user_to_report_newsletter()
        if users:
            try:
                filename = create_excel_from_objects(users)
                await client.send_file("me", filename)
                os.remove(filename)
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞: {e}")
                await client.send_message("me", f"‚ùå –û—à–∏–±–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞: {e}")

        status = (
            f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞\n"
            f"‚Ä¢ üì® –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {newsletter_state['sent_count']}/{newsletter_state['total_users']}\n"
            f"‚Ä¢ ‚ùå –ù–µ—É–¥–∞—á–Ω–æ: {newsletter_state['failed_count']}\n"
        )
        await client.send_message("me", status)