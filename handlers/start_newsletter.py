from utils.general import *
import os
import asyncio
import random
from datetime import datetime
from telethon import events
from telethon.tl.types import MessageMediaDocument
import logging

from filter.filter import owner_filter
from config_data.client import client
from utils.random_get_message import TypeMessage
from utils import working_state as ws
from utils.sqlite3_to_exel import create_excel_from_objects


async def wait_for_user_response(chat_id, timeout=60):
    """–û–∂–∏–¥–∞–µ—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        # –°–æ–∑–¥–∞–µ–º future –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è
        response_future = asyncio.Future()
        waiting_for_response[chat_id] = response_future

        # –ñ–¥–µ–º –æ—Ç–≤–µ—Ç–∞ —Å —Ç–∞–π–º–∞—É—Ç–æ–º
        response = await asyncio.wait_for(response_future, timeout=timeout)
        return response

    except asyncio.TimeoutError:
        return None
    finally:
        # –£–±–∏—Ä–∞–µ–º –∏–∑ –æ–∂–∏–¥–∞–Ω–∏—è
        if chat_id in waiting_for_response:
            del waiting_for_response[chat_id]


async def download_file(event, message):
    """–°–∫–∞—á–∏–≤–∞–µ—Ç —Ñ–∞–π–ª –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    try:
        if message.media and isinstance(message.media, MessageMediaDocument):
            os.makedirs("downloads", exist_ok=True)
            file_path = await client.download_media(message.media, "downloads/")
            logging.info(f"–§–∞–π–ª —Å–∫–∞—á–∞–Ω: {file_path}")
            return file_path
        else:
            await event.reply("‚ùå –í —Å–æ–æ–±—â–µ–Ω–∏–∏ –Ω–µ—Ç —Ñ–∞–π–ª–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è")
            return None
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")
        await event.reply(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")
        return None


@client.on(events.NewMessage(pattern='/start_newsletter', func=owner_filter))
async def newsletter(event):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /newsletter"""
    global newsletter_state

    try:
        if not is_valid_message_event(event):
            return
        logging.info("newsletter")
        if newsletter_state['is_running']:
            await event.reply("‚ùå –†–∞—Å—Å—ã–ª–∫–∞ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /newsletter_status –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞")
            return

        message_type = TypeMessage.greeting
        type_name = "–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ"

        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ñ–∞–π–ª
        await event.reply(
            "–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª (.txt) —Å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.\n"
            "–ö–∞–∂–¥—ã–π ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ."
        )

        # –ñ–¥–µ–º —Ñ–∞–π–ª –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        file_response = await wait_for_user_response(event.chat_id, timeout=120)

        if not file_response:
            await event.reply("‚è∞ –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞ –∏—Å—Ç–µ–∫–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return

        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
        file_path = await download_file(event, file_response)
        if not file_path:
            return

        # –ü–∞—Ä—Å–∏–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        user_ids = await parse_user_ids_from_file(file_path)

        if not user_ids:
            await event.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å ID –∏–∑ —Ñ–∞–π–ª–∞ –∏–ª–∏ —Ñ–∞–π–ª –ø—É—Å—Ç.")
            try:
                os.remove(file_path)
            except:
                pass
            return
        os.remove(file_path)

        # –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö ID
        await event.reply("üîç –ü—Ä–æ–≤–µ—Ä—è—é –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö ID...")
        valid_users, existing_ids = await validate_user_ids(user_ids)

        # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        messages = []


        if existing_ids:
            messages.append(f"üìã –£–∂–µ –≤ –ë–î: {len(existing_ids)}")

        if valid_users:
            messages.append(f"‚úÖ –ù–æ–≤—ã—Ö –≤–∞–ª–∏–¥–Ω—ã—Ö: {len(valid_users)}")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–≤–æ–¥–∫—É
        if messages:
            summary = "üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏:\n" + "\n".join(messages)
            await event.reply(summary)
        else:
            await event.reply("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
        if not valid_users:
            if existing_ids:
                await event.reply("‚ÑπÔ∏è –ù–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ—Ç, –Ω–æ –µ—Å—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –≤ –ë–î.")
            else:
                await event.reply("‚ùå –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.")
            return

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –≤–∞–ª–∏–¥–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        user_ids = valid_users
        await rq.add_users(user_ids)

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏
        newsletter_state.update({
            'is_running': True,
            'total_users': len(user_ids),
            'sent_count': 0,
            'failed_count': 0,
            'current_batch': 0,
            'start_time': datetime.now(),
            'end_time': None,
            'message_type': message_type,
            'user_ids': user_ids,
            'current_index': 0
        })

        if not await ws.work_state_chack():
            await event.reply(
                f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞!\n"
                f"‚Ä¢ üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(user_ids)}\n"
                f"‚Ä¢ üìù –¢–∏–ø —Å–æ–æ–±—â–µ–Ω–∏–π: {type_name}\n"
                f"‚Ä¢ ‚è±Ô∏è –ü–µ—Ä–µ—Ä—ã–≤—ã: 15 –º–∏–Ω—É—Ç –º–µ–∂–¥—É –ø–∞—á–∫–∞–º–∏\n"
                f"‚Ä¢ ‚ö° –°–æ–æ–±—â–µ–Ω–∏—è: 3-5 —Å–µ–∫—É–Ω–¥ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏\n\n"
                f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /newsletter_status –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞"
            )
            await event.reply("‚è∏Ô∏è –°–µ–π—á–∞—Å –≤–Ω–µ —Ä–∞–±–æ—á–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ (8:00-20:00). –ó–∞–ø—É—Å–∫ –æ—Ç–ª–æ–∂–µ–Ω.")
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É –≤ —Ñ–æ–Ω–µ - –æ–Ω–∞ —Å–∞–º–∞ –±—É–¥–µ—Ç –∂–¥–∞—Ç—å
            asyncio.create_task(run_newsletter(event))
        else:
            await event.reply(
                f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞!\n"
                f"‚Ä¢ üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(user_ids)}\n"
                f"‚Ä¢ üìù –¢–∏–ø —Å–æ–æ–±—â–µ–Ω–∏–π: {type_name}\n"
                f"‚Ä¢ ‚è±Ô∏è –ü–µ—Ä–µ—Ä—ã–≤—ã: 15 –º–∏–Ω—É—Ç –º–µ–∂–¥—É –ø–∞—á–∫–∞–º–∏\n"
                f"‚Ä¢ ‚ö° –°–æ–æ–±—â–µ–Ω–∏—è: 3-5 —Å–µ–∫—É–Ω–¥ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏\n\n"
                f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /newsletter_status –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞"
            )
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É –≤ —Ñ–æ–Ω–µ
            asyncio.create_task(run_newsletter(event))

        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        try:
            os.remove(file_path)
        except:
            pass

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ newsletter –∫–æ–º–∞–Ω–¥–µ: {e}")
        if is_valid_message_event(event):
            await event.reply(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")


async def parse_user_ids_from_file(file_path: str) -> list:
    """–ü–∞—Ä—Å–∏—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Ñ–∞–π–ª–∞"""
    user_ids = []

    try:
        with open(file_path, 'r', encoding='utf-8') as file:
            for line in file:
                line = line.replace("\n", " ")
                user_id = line.split(" ")
                for i in user_id:
                    if i.isdigit():
                        user_ids.append(i)

        logging.info(f"Parsed {len(user_ids)} user IDs from file")
        return user_ids

    except Exception as e:
        logging.error(f"Error parsing user IDs: {e}")
        return []



def is_valid_message_event(event):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ —ç—Ç–æ –≤–∞–ª–∏–¥–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    return (hasattr(event, 'message') and
            hasattr(event.message, 'text') and
            isinstance(event, events.NewMessage.Event))

async def run_newsletter(event):
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –≤—Ä–µ–º–µ–Ω–∏"""
    global newsletter_state

    try:
        # –û–∂–∏–¥–∞–µ–º —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º
        if not await ws.work_state_chack():
            await event.reply("‚è∏Ô∏è –í–Ω–µ —Ä–∞–±–æ—á–µ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ (8:00-20:00). –û–∂–∏–¥–∞–µ–º...")
            await asyncio.sleep(await ws.time_to_work())
            # –ü–æ—Å–ª–µ –æ–∂–∏–¥–∞–Ω–∏—è –ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª–∞ –ª–∏ —Ä–∞—Å—Å—ã–ª–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞
            if not newsletter_state['is_running']:
                await event.reply("‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –±—ã–ª–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –≤–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è.")
                return
            await event.reply("‚úÖ –†–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è –Ω–∞—Å—Ç—É–ø–∏–ª–æ! –ù–∞—á–∏–Ω–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É.")

        while newsletter_state['is_running'] and newsletter_state['current_index'] < len(newsletter_state['user_ids']):
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è –ø–µ—Ä–µ–¥ –∫–∞–∂–¥–æ–π –ø–∞—á–∫–æ–π
            if not await ws.work_state_chack():
                await event.reply("‚è∏Ô∏è –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤–Ω–µ —Ä–∞–±–æ—á–µ–≥–æ –ø–µ—Ä–∏–æ–¥–∞. –û–∂–∏–¥–∞–µ–º...")
                await asyncio.sleep(await ws.time_to_work())
                # –ü–æ—Å–ª–µ –æ–∂–∏–¥–∞–Ω–∏—è –ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª–∞ –ª–∏ —Ä–∞—Å—Å—ã–ª–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞
                if not newsletter_state['is_running']:
                    await event.reply("‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –±—ã–ª–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –≤–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è.")
                    return
                await event.reply("‚úÖ –†–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è –Ω–∞—Å—Ç—É–ø–∏–ª–æ! –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É.")
                continue

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞–∑–º–µ—Ä —Ç–µ–∫—É—â–µ–π –ø–∞—á–∫–∏ (—Ä–∞–Ω–¥–æ–º–Ω–æ 5-15 —Å–æ–æ–±—â–µ–Ω–∏–π)
            batch_size = random.randint(5, 15)
            remaining_users = len(newsletter_state['user_ids']) - newsletter_state['current_index']
            batch_size = min(batch_size, remaining_users)

            # –ë–µ—Ä–µ–º –ø–∞—á–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            start_idx = newsletter_state['current_index']
            end_idx = start_idx + batch_size
            user_ids_batch = newsletter_state['user_ids'][start_idx:end_idx]

            newsletter_state['current_batch'] += 1

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–∞—á–∫—É
            logging.info(f"üì¶ –ü–∞—á–∫–∞ #{newsletter_state['current_batch']}: {batch_size} —Å–æ–æ–±—â–µ–Ω–∏–π")
            await event.reply(f"üì¶ –ü–∞—á–∫–∞ #{newsletter_state['current_batch']}: {batch_size} —Å–æ–æ–±—â–µ–Ω–∏–π")
            batch_results = await send_messages_batch(user_ids_batch, newsletter_state['message_type'], client)

            logging.info(f"‚úÖ –ü–∞—á–∫–∞ #{newsletter_state['current_batch']} –∑–∞–≤–µ—Ä—à–µ–Ω–∞: "
                         f"{batch_results['success']} —É—Å–ø–µ—à–Ω–æ, {batch_results['failed']} –Ω–µ—É–¥–∞—á–Ω–æ")
            await event.reply(f"‚úÖ –ü–∞—á–∫–∞ #{newsletter_state['current_batch']} –∑–∞–≤–µ—Ä—à–µ–Ω–∞: "
                              f"{batch_results['success']} —É—Å–ø–µ—à–Ω–æ, {batch_results['failed']} –Ω–µ—É–¥–∞—á–Ω–æ")

            # –ï—Å–ª–∏ –µ—â–µ –µ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ - –¥–µ–ª–∞–µ–º –ø–µ—Ä–µ—Ä—ã–≤ 15 –º–∏–Ω—É—Ç
            if newsletter_state['current_index'] < len(newsletter_state['user_ids']):
                logging.info("‚è∏Ô∏è –ü–µ—Ä–µ—Ä—ã–≤ 15 –º–∏–Ω—É—Ç –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –ø–∞—á–∫–∏...")
                await event.reply("‚è∏Ô∏è –ü–µ—Ä–µ—Ä—ã–≤ 15 –º–∏–Ω—É—Ç –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –ø–∞—á–∫–∏...")
                users = await rq.get_user_to_report_newsletter()
                text = create_excel_from_objects(users)
                await client.send_file(event.message.chat_id, text)
                os.remove(text)
                # –ñ–¥–µ–º 15 –º–∏–Ω—É—Ç, –Ω–æ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É, –Ω–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ª–∏ —Ä–∞—Å—Å—ã–ª–∫–∞
                for _ in range(15):
                    await asyncio.sleep(60)
                    if not newsletter_state['is_running']:
                        await event.reply("‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –≤–æ –≤—Ä–µ–º—è –ø–µ—Ä–µ—Ä—ã–≤–∞.")
                        return

    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ run_newsletter: {e}")
        await event.reply(f"‚ùå –û—à–∏–±–∫–∞ –≤ run_newsletter: {e}")
    finally:
        # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏
        newsletter_state['is_running'] = False
        newsletter_state['end_time'] = datetime.now()
        newsletter_state['is_waiting_for_work_hours'] = False
        logging.info("‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        status = (
            f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞\n"
            f"‚Ä¢ üì® –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {newsletter_state['sent_count']}/{newsletter_state['total_users']}\n"
            f"‚Ä¢ ‚ùå –ù–µ—É–¥–∞—á–Ω–æ: {newsletter_state['failed_count']}\n"
            )
        users = await rq.get_user_to_report_newsletter()
        text = create_excel_from_objects(users)
        await client.send_file(event.message.chat_id, text)
        os.remove(text)
        await event.reply(status)
