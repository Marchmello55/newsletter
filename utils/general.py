import os
import asyncio
import random
from datetime import datetime

from telethon import events
from telethon.tl.types import PeerUser, MessageMediaDocument
import logging
from telethon.errors import (
    FloodWaitError,
    UserIsBlockedError,
    PeerIdInvalidError,
    ChannelPrivateError,
    InputUserDeactivatedError,
    UserDeactivatedError,
    BotMethodInvalidError,
    ChatWriteForbiddenError,
    PeerFloodError,
    UserPrivacyRestrictedError,
    PhoneNumberBannedError,
    AuthKeyUnregisteredError,
    SessionPasswordNeededError
)
from filter.filter import owner_filter
from config_data.client import client
from utils.random_get_message import random_message, TypeMessage
from database import requests as rq


# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏
newsletter_state = {
    'is_running': False,
    'is_waiting_for_work_hours': False,
    'total_users': 0,
    'sent_count': 0,
    'failed_count': 0,
    'current_batch': 0,
    'start_time': None,
    'end_time': None,
    'message_type': '',
    'user_ids': [],
    'current_index': 0
}

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è –æ–∂–∏–¥–∞–µ–º—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
waiting_for_response = {}


# –ö—ç—à —Å—É—â–Ω–æ—Å—Ç–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_entity_cache = {}


@client.on(events.NewMessage(func=owner_filter))
async def handle_user_responses(event):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    if not is_valid_message_event(event):
        return
    chat_id = event.chat_id
    if chat_id in waiting_for_response:
        # –ó–∞–≤–µ—Ä—à–∞–µ–º future —Å –æ—Ç–≤–µ—Ç–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        waiting_for_response[chat_id].set_result(event.message)


@client.on(events.NewMessage())
async def get_answer(event):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    try:
        if not is_valid_message_event(event):
            return
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ
        user_exists = await rq.check_user(event.sender_id)
        if not user_exists:
            return

        # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await rq.update_answer(event.sender_id, event.message.text)
        logging.info("get_answer")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
        message_text = await random_message(TypeMessage.question)
        await event.reply(message_text)

    except Exception as e:
        logging.error(f"Unhandled exception on get_answer: {e}")


def is_valid_message_event(event):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ —ç—Ç–æ –≤–∞–ª–∏–¥–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    return (hasattr(event, 'message') and
            hasattr(event.message, 'text') and
            isinstance(event, events.NewMessage.Event))


async def download_file(event, message):
    """–°–∫–∞—á–∏–≤–∞–µ—Ç —Ñ–∞–π–ª –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    try:
        if message.media and isinstance(message.media, MessageMediaDocument):
            os.makedirs("downloads", exist_ok=True)
            file_path = await client.download_media(message.media, "downloads/")
            logging.info(f"–§–∞–π–ª —Å–∫–∞—á–∞–Ω: {file_path}")
            return file_path
        else:
            await event.reply("‚ùå –í —Å–æ–æ–±—â–µ–Ω–∏–∏ –Ω–µ—Ç —Ñ–∞–π–ª–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è")
            return None
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")
        await event.reply(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")
        return None


async def parse_user_ids_from_file(file_path: str) -> list:
    """–ü–∞—Ä—Å–∏—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Ñ–∞–π–ª–∞"""
    user_ids = []

    try:
        with open(file_path, 'r', encoding='utf-8') as file:
            for line in file:
                line = line.replace("\n", " ")
                user_id = line.split(" ")
                for i in user_id:
                    if i.isdigit():
                        user_ids.append(i)

        logging.info(f"Parsed {len(user_ids)} user IDs from file")
        return user_ids

    except Exception as e:
        logging.error(f"Error parsing user IDs: {e}")
        return []


async def validate_user_ids(user_ids):
    """–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –±–µ–∑ GetUsersRequest"""
    logging.info(f"–ù–∞—á–∞–ª–æ –ø—Ä–æ–≤–µ—Ä–∫–∏ {len(user_ids)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")


    user_ids = list(set(user_ids))
    logging.info(f"–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏: {len(user_ids)}")

    existing_ids, to_check = await rq.check_users_exist_batch(user_ids)
    logging.info(f"–ü—Ä–æ–ø—É—Å–∫–∞–µ–º {len(existing_ids)} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –≤ –ë–î")

    if not to_check:
        return [], existing_ids


    logging.info(f"–í–∞–ª–∏–¥–Ω—ã—Ö: {len(to_check)}, –ï—Å—Ç—å –≤ –±–∞–∑–µ {len(existing_ids)}")
    return to_check, existing_ids



def get_newsletter_status():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç—É—Å —Ç–µ–∫—É—â–µ–π —Ä–∞—Å—Å—ã–ª–∫–∏"""
    if not newsletter_state['is_running']:
        return "üì≠ –†–∞—Å—Å—ã–ª–∫–∞ –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞"

    elapsed = datetime.now() - newsletter_state['start_time']
    progress = (newsletter_state['current_index'] / newsletter_state['total_users'] * 100) if newsletter_state[
                                                                                                  'total_users'] > 0 else 0

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ä–∞—Å—Å—ã–ª–∫–∏
    if newsletter_state['message_type'] == 'custom':
        message_info = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è ({len(newsletter_state.get('message_variations', []))} –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤)"
    else:
        message_info = "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è (–≤–æ–ø—Ä–æ—Å—ã)"

    status = (
        f"üìä –°—Ç–∞—Ç—É—Å —Ä–∞—Å—Å—ã–ª–∫–∏:\n"
        f"‚Ä¢ üèÉ‚Äç‚ôÇÔ∏è –°—Ç–∞—Ç—É—Å: {'–ó–∞–ø—É—â–µ–Ω–∞' if newsletter_state['is_running'] else '–ó–∞–≤–µ—Ä—à–µ–Ω–∞'}\n"
        f"‚Ä¢ üì® –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {newsletter_state['sent_count']}/{newsletter_state['total_users']}\n"
        f"‚Ä¢ ‚ùå –ù–µ—É–¥–∞—á–Ω–æ: {newsletter_state['failed_count']}\n"
        f"‚Ä¢ üì¶ –ü–∞—á–µ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {newsletter_state['current_batch']}\n"
        f"‚Ä¢ üìù –¢–∏–ø: {message_info}\n"
        f"‚Ä¢ üìà –ü—Ä–æ–≥—Ä–µ—Å—Å: {progress:.1f}%\n"
        f"‚Ä¢ ‚è±Ô∏è –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {elapsed}\n"
        f"‚Ä¢ üéØ –¢–µ–∫—É—â–∏–π –∏–Ω–¥–µ–∫—Å: {newsletter_state['current_index']}"
    )

    return status

async def send_custom_messages_batch(user_ids_batch, client):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–∞—á–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    batch_results = {'success': 0, 'failed': 0}

    for user_id in user_ids_batch:
        try:
            # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –≤–∞—Ä–∏–∞—Ü–∏–π
            message_text = random.choice(newsletter_state['message_variations'])

            # –†–∞–Ω–¥–æ–º–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ 3-5 —Å–µ–∫—É–Ω–¥
            delay = random.uniform(3, 5)
            await asyncio.sleep(delay)

            success = await send_message_to_user(user_id, message_text, client)

            if success:
                batch_results['success'] += 1
                newsletter_state['sent_count'] += 1
            else:
                batch_results['failed'] += 1
                newsletter_state['failed_count'] += 1

            newsletter_state['current_index'] += 1

        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
            batch_results['failed'] += 1
            newsletter_state['failed_count'] += 1
            newsletter_state['current_index'] += 1

    return batch_results


async def send_messages_batch(user_ids_batch, message_type, client):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–∞—á–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π —Å —Ä–∞–Ω–¥–æ–º–Ω—ã–º–∏ –∑–∞–¥–µ—Ä–∂–∫–∞–º–∏"""
    batch_results = {'success': 0, 'failed': 0}

    for user_id in user_ids_batch:
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–Ω–¥–æ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            message_text = await random_message(message_type)

            # –†–∞–Ω–¥–æ–º–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ 3-5 —Å–µ–∫—É–Ω–¥
            delay = random.uniform(3, 5)
            await asyncio.sleep(delay)

            success = await send_message_to_user(user_id, message_text, client)

            if success:
                batch_results['success'] += 1
                newsletter_state['sent_count'] += 1
            else:
                batch_results['failed'] += 1
                newsletter_state['failed_count'] += 1

            newsletter_state['current_index'] += 1

        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
            batch_results['failed'] += 1
            newsletter_state['failed_count'] += 1
            newsletter_state['current_index'] += 1

    return batch_results


async def send_message_to_user(user_id, message_text, client):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ ID —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º —Å—É—â–Ω–æ—Å—Ç–µ–π"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å ID
        user_id_str = str(user_id).strip()
        if not user_id_str.isdigit() or int(user_id_str) <= 0:
            logging.error(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_id}")
            await rq.update_state_users(int(user_id), 2, cause="–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID")
            return False

        user_id_int = int(user_id_str)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
        if user_id_int in user_entity_cache:
            user_entity = user_entity_cache[user_id_int]
        else:
            # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Å—É—â–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            try:
                user_entity = await client.get_entity(PeerUser(user_id_int))
                user_entity_cache[user_id_int] = user_entity

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –∞–∫–∫–∞—É–Ω—Ç–∞
                if hasattr(user_entity, 'bot') and user_entity.bot:
                    logging.error(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id_int} —è–≤–ª—è–µ—Ç—Å—è –±–æ—Ç–æ–º")
                    await rq.update_state_users(user_id_int, 2, cause="–ê–∫–∫–∞—É–Ω—Ç —è–≤–ª—è–µ—Ç—Å—è –±–æ—Ç–æ–º")
                    return False

                if hasattr(user_entity, 'deleted') and user_entity.deleted:
                    logging.error(f"‚ùå –ê–∫–∫–∞—É–Ω—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id_int} —É–¥–∞–ª–µ–Ω")
                    await rq.update_state_users(user_id_int, 2, cause="–ê–∫–∫–∞—É–Ω—Ç —É–¥–∞–ª–µ–Ω")
                    return False

            except (ValueError, PeerIdInvalidError):
                logging.error(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id_int}")
                await rq.update_state_users(user_id_int, 2, cause="–ù–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
                return False
            except Exception as e:
                logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—É—â–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id_int}: {e}")
                await rq.update_state_users(user_id_int, 2, cause=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—É—â–Ω–æ—Å—Ç–∏: {str(e)}")
                return False

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await rq.add_respondent_users(user_id_int)
        await rq.update_state_users(user_id_int, 1)
        await client.send_message(entity=user_entity, message=message_text)
        logging.info(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id_int}")
        return True

    except FloodWaitError as e:
        logging.error(f"‚è≥ FloodWait –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id_int}: {e.seconds} —Å–µ–∫")
        await asyncio.sleep(e.seconds)
        await rq.update_state_users(user_id_int, 2, cause=f"FloodWait: {e.seconds} —Å–µ–∫")
        return False

    except UserIsBlockedError:
        logging.error(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id_int} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞")
        await rq.update_state_users(user_id_int, 2, cause="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞")
        return False

    except PeerIdInvalidError:
        logging.error(f"‚ùå –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π Peer ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id_int}")
        await rq.update_state_users(user_id_int, 2, cause="–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π Peer ID")
        return False

    except ChannelPrivateError:
        logging.error(f"‚ùå –ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–∞–Ω–∞–ª –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id_int}")
        await rq.update_state_users(user_id_int, 2, cause="–ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–∞–Ω–∞–ª")
        return False

    except InputUserDeactivatedError:
        logging.error(f"‚ùå –ê–∫–∫–∞—É–Ω—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id_int} –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω/—É–¥–∞–ª–µ–Ω")
        await rq.update_state_users(user_id_int, 2, cause="–ê–∫–∫–∞—É–Ω—Ç –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –∏–ª–∏ —É–¥–∞–ª–µ–Ω")
        return False

    except UserDeactivatedError:
        logging.error(f"‚ùå –ê–∫–∫–∞—É–Ω—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id_int} –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
        await rq.update_state_users(user_id_int, 2, cause="–ê–∫–∫–∞—É–Ω—Ç –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
        return False

    except BotMethodInvalidError:
        logging.error(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id_int} —è–≤–ª—è–µ—Ç—Å—è –±–æ—Ç–æ–º")
        await rq.update_state_users(user_id_int, 2, cause="–ê–∫–∫–∞—É–Ω—Ç —è–≤–ª—è–µ—Ç—Å—è –±–æ—Ç–æ–º")
        return False

    except ChatWriteForbiddenError:
        logging.error(f"‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id_int}")
        await rq.update_state_users(user_id_int, 2, cause="–ù–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π")
        return False

    except PeerFloodError:
        logging.error(f"‚ùå Flood protection –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id_int}")
        await rq.update_state_users(user_id_int, 2, cause="Flood protection (–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏)")
        return False

    except UserPrivacyRestrictedError:
        logging.error(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id_int} –æ–≥—Ä–∞–Ω–∏—á–∏–ª –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π")
        await rq.update_state_users(user_id_int, 2, cause="–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        return False

    except PhoneNumberBannedError:
        logging.error(f"‚ùå –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∑–∞–±–∞–Ω–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id_int}")
        await rq.update_state_users(user_id_int, 2, cause="–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∑–∞–±–∞–Ω–µ–Ω")
        return False

    except AuthKeyUnregisteredError:
        logging.error(f"‚ùå –°–µ—Å—Å–∏—è –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id_int}")
        await rq.update_state_users(user_id_int, 2, cause="–°–µ—Å—Å–∏—è –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞")
        return False

    except SessionPasswordNeededError:
        logging.error(f"‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è –ø–∞—Ä–æ–ª—å —Å–µ—Å—Å–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id_int}")
        await rq.update_state_users(user_id_int, 2, cause="–¢—Ä–µ–±—É–µ—Ç—Å—è –ø–∞—Ä–æ–ª—å —Å–µ—Å—Å–∏–∏")
        return False

    except TimeoutError:
        logging.error(f"‚ùå –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id_int}")
        await rq.update_state_users(user_id_int, 2, cause="–¢–∞–π–º–∞—É—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è")
        return False

    except ConnectionError:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id_int}")
        await rq.update_state_users(user_id_int, 2, cause="–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è")
        return False

    except Exception as e:
        # –õ–æ–≤–∏–º –¥—Ä—É–≥–∏–µ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –æ—à–∏–±–∫–∏ Telegram
        error_msg = str(e).lower()
        if "premium" in error_msg or "premium" in error_msg:
            logging.error(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id_int} —Ç—Ä–µ–±—É–µ—Ç Telegram Premium")
            await rq.update_state_users(user_id_int, 2, cause="–¢—Ä–µ–±—É–µ—Ç—Å—è Telegram Premium –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏")
        elif "bot" in error_msg:
            logging.error(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id_int} —è–≤–ª—è–µ—Ç—Å—è –±–æ—Ç–æ–º")
            await rq.update_state_users(user_id_int, 2, cause="–ê–∫–∫–∞—É–Ω—Ç —è–≤–ª—è–µ—Ç—Å—è –±–æ—Ç–æ–º")
        elif "deleted" in error_msg or "deactivated" in error_msg:
            logging.error(f"‚ùå –ê–∫–∫–∞—É–Ω—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id_int} —É–¥–∞–ª–µ–Ω/–¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
            await rq.update_state_users(user_id_int, 2, cause="–ê–∫–∫–∞—É–Ω—Ç —É–¥–∞–ª–µ–Ω –∏–ª–∏ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
        elif "privacy" in error_msg or "restricted" in error_msg:
            logging.error(f"‚ùå –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id_int}")
            await rq.update_state_users(user_id_int, 2, cause="–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        else:
            logging.error(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id_int}: {e}")
            await rq.update_state_users(user_id_int, 2, cause=f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
        return False


async def create_text_file(text_content):
    with open('text', 'w', encoding='utf-8') as file:
        file.write(text_content)

    logging.info("–§–∞–π–ª 'text.txt' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!")

async def get_text(filename='text.txt'):
    """–ß–∏—Ç–∞–µ—Ç –≤—Å—ë —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É"""
    try:
        with open(filename, 'r', encoding='utf-8') as file:
            content = file.read()
        if len(content)!=0:return content
        else:return None
    except FileNotFoundError:
        print(f"–§–∞–π–ª {filename} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return None
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")
        return None


def save_list_to_txt(data_list, filename: str = "users.txt", mode='w'):
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–ø–∏—Å–æ–∫ –≤ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª

    Args:
        data_list: —Å–ø–∏—Å–æ–∫ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        filename: –∏–º—è —Ñ–∞–π–ª–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'users.txt')
        mode: —Ä–µ–∂–∏–º –∑–∞–ø–∏—Å–∏ ('w' - –ø–µ—Ä–µ–∑–∞–ø–∏—Å—å, 'a' - –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ)
    """
    try:
        with open(filename, mode, encoding='utf-8') as file:
            for item in data_list:
                file.write(str(item) + '\n')
        return filename
    except Exception as e:
        return False